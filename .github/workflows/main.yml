name: Build Maven Project

on:
  push:
    branches:
      - main 
jobs:
  build_and_upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build with Maven
        run: mvn clean install

      - name: Run Unit test case
        run: mvn test

      # - name: Archive Artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: my-artifact  
      #     path: target/
      
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: sample.war
      #     path: target/*.war

 

      # - name: Download Artifacts
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: sample.war
      #     path: target
      
      - name : verify steps
        run: ls -la target
      
      - name: Display Workflow Information
        run: |
          echo "Workflow Run ID: $GITHUB_RUN_ID"
          echo "Workflow Run Number: $GITHUB_RUN_NUMBER"
          echo "Workflow Name: $GITHUB_WORKFLOW"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Commit SHA: $GITHUB_SHA"
          echo "Triggering Event: $GITHUB_EVENT_NAME"
          echo "workspace directory : $GITHUB_WORKSPACE"

  
      
      - name: Docker Login 
        uses: docker/login-action@v3
        with:
             username: ${{ secrets.DOCKER_USERNAME }}
             password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
             docker build -t "${DOCKER_USERNAME}/sample-project:latest" -t "${DOCKER_USERNAME}/sample-project:$GITHUB_RUN_NUMBER" .
             docker push "${DOCKER_USERNAME}/sample-project:latest" 
             docker push "${DOCKER_USERNAME}/sample-project:$GITHUB_RUN_NUMBER"
        env:
             DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      
      - name: Checking stage
        run: |
          ContainerID=`docker ps | grep 8090 | cut -d " " -f 1`
          if [ ! -z $ContainerID ]
          then
          docker stop $ContainerID
          docker rm $ContainerID
          fi
      
      - name: Run Docker Container
        env:
             DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          
          docker run -d -p 8080:80 --name my-container ${DOCKER_USERNAME}/sample-project:latest  
          docker ps -a
          CONTAINER_NAME="my-container"
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_NAME)
          echo "Container IP: $CONTAINER_IP"
          curl http://$CONTAINER_IP:8080/
       
      